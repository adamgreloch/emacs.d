#+TITLE: Emacs configuration

* Maintenance
** TODO Finish throwing and documenting stuff
** TODO Make =smart-compile= buffer somehow r/w for data input
** TODO Configure org-todo-keyword-faces
** TODO Work on backups
* Mission critical entry stuff
** Check OS macro
[[https://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp][emacs - How to determine operating system in elisp? - Stack Overflow]]
#+BEGIN_SRC emacs-lisp
  (defmacro with-system (type &rest body)
    "Evaluate BODY if `system-type' equals TYPE."
    (declare (indent defun))
    `(when (eq system-type ',type)
       ,@body))
#+END_SRC
** Disable ring bell, menu/tool/scroll bar
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC
*** TODO check if scroll-bar in daemon mode is being disabled properly by toggle or by a function below
#+BEGIN_SRC emacs-lisp
(defun my-disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my-disable-scroll-bars)
#+END_SRC
** Set custom-file
This ensures custom-set variables and faces land in their cozy home without any issues
#+BEGIN_SRC emacs-lisp
  (with-system darwin
    (setq custom-file "~/.emacs.d/mac-custom.el"))
  (with-system windows-nt
    (setq custom-file "~/.emacs.d/win-custom.el"))
  (with-system gnu/linux
    (setq custom-file "~/.emacs.d/linux-custom.el"))

  (load custom-file)
#+END_SRC
** Backups
*** Make auto-saves and backups in =~/.emacs-saves/= dir
#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t      
      backup-directory-alist '(("." . "~/.emacs-saves/"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      vc-make-backup-files t
      version-control t)
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs-saves/" t)))
(setq create-lockfiles nil)
#+END_SRC
*** Delete backups week old
#+BEGIN_SRC emacs-lisp
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))
#+END_SRC
** Confirm kill-emacs
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC
* Miscellaneous user interface tweaks
** scroll-margin 
vim-like scrolling
#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 12)

  (defun org-export-dispatch-disable-scroll-margin (&rest args)
      "disables scroll-margin in org export dispatcher buffer where it's unnecessary"
    (let ((buf (get-buffer "*Org Export Dispatcher*")))
      (when buf
        (with-current-buffer buf
          (set (make-local-variable 'scroll-margin) 0)))))

  (advice-add 'org-export--dispatch-action :before #'org-export-dispatch-disable-scroll-margin)


#+end_src
** Dashboard config
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :demand t
    :config
    (setq dashboard-items '((recents  . 10)
    (bookmarks . 5)
    (projects . 5)))
    ;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-startup-banner 'logo)
    (dashboard-setup-startup-hook))
#+END_SRC
** Replace selected text automatically when typing
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** Line numbers (disabled) and truncate lines
Will try working without line-numbers for a while
#+BEGIN_SRC emacs-lisp
;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'toggle-truncate-lines nil)
#+END_SRC
*** TODO what on earth were =truncate-lines=?
** Cursor settings (blinking)
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode +1)
#+END_SRC
** =rainbow-mode=
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
#+END_SRC
* Theme
** Loads =zenburn= and overwrites some faces
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :demand t
    :config
    (load-theme 'zenburn)
    (set-face-attribute 'mode-line nil
                        :box nil)
    (set-face-attribute 'mode-line-inactive nil
                        :box nil)
    (set-face-attribute 'header-line nil
                        :box nil)
    (set-face-attribute 'vertical-border nil
                        :foreground "#4F4F4F"))
#+END_SRC
* Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :config
    (evil-mode 1))
#+end_src
* Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :demand t
    :config
    (spaceline-spacemacs-theme))
#+end_src
* OSX-specific settings
** bind modifier keys properly
#+BEGIN_SRC emacs-lisp
  (with-system darwin
  ;;  (define-key key-translation-map (kbd "M-2") (kbd "~"))
    (setq mac-command-modifier 'super)
    (setq mac-right-option-modifier 'nil)
    (setq mac-option-modifier 'meta)
    (setq mac-right-command-modifier 'control))
#+END_SRC
* Windows-specific settings
#+BEGIN_SRC emacs-lisp
  (with-system windows-nt
    (setq w32-pass-apps-to-system nil)
    (setq w32-apps-modifier 'super)
    (setq default-directory "c:/git/" ))
#+END_SRC
** Define powershell6 and set it as default for shell-pop
#+BEGIN_SRC emacs-lisp
  (with-system windows-nt
    (defun powershell6 (&optional buffer)
      "Launches a PowerShell 6 instance in buffer *powershell6* and switches to it."
      (interactive)
      (let ((buffer (or buffer "*powershell6*"))
          (powershell6-prog "C:\\Program Files\\PowerShell\\6\\pwsh.exe"))
        (make-comint-in-buffer "shell" "*powershell6*" powershell6-prog)
        (switch-to-buffer buffer)))
  
    ;; make comint-derived modes' like `shell' output and prompt read-only
    (setq comint-prompt-read-only t)
  
    (defun my-comint-preoutput-turn-buffer-read-only (text)
    (propertize text 'read-only t))
  
    (add-hook 'comint-preoutput-filter-functions 'my-comint-preoutput-turn-buffer-read-only)
  
    (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist))
#+END_SRC
** Run activity-watch
#+BEGIN_SRC emacs-lisp
  (with-system windows-nt
    (use-package activity-watch-mode
    :config
    (global-activity-watch-mode)))
#+END_SRC
* Performance settings
** Set UTF-8 as default
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC
** Turn off graphical tooltips
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC
** Profile dotfiles
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :commands (esup))
#+END_SRC
** Defer
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    ;; Loads after 1 second of idle time.
    :defer 1)
#+END_SRC
* Locale and standarization
** Format-time-string localization
Necessary for proper =org-journal= entry title creation on OSX (i.e. /sobota, 2.05.20/)
#+BEGIN_SRC emacs-lisp
  (setq system-time-locale "pl_PL.UTF-8")
#+END_SRC
** Set UTF-8 as a default process coding system
#+BEGIN_SRC emacs-lisp
(setq default-process-coding-system '(utf-8 . utf-8))
#+END_SRC
* Navigation
** Neotree                                                        :shortcut:
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-theme 'ascii
	neo-smart-open t))
(global-set-key (kbd "C-x C-n") 'neotree-toggle)
#+END_SRC
** Ibuffer-sidebar with project grouping                          :shortcut:
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-sidebar
    :commands (ibuffer-sidebar-toggle-sidebar))

  (use-package ibuffer-projectile
    :commands (ibuffer-projectile-set-filter-groups
               ibuffer-projectile-generate-filter-groups)
    :init
    (defun j-ibuffer-projectile-run ()
      "Set up `ibuffer-projectile'."
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))

    (add-hook 'ibuffer-sidebar-mode-hook #'j-ibuffer-projectile-run)
    (add-hook 'ibuffer-hook #'j-ibuffer-projectile-run)
    :config
    (setq ibuffer-projectile-prefix ""))

  (global-set-key (kbd "C-x C-m") 'ibuffer-sidebar-toggle-sidebar)
#+END_SRC
** ace-window                                                     :shortcut:
#+BEGIN_SRC emacs-lisp
(use-package ace-window)
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm)
#+END_SRC
* Shell
** Shell-pop
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :config
    (setq shell-pop-window-size 50))
  (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
  (global-set-key (kbd "C-!") 'shell-pop)
#+END_SRC
* VC/project management/IDO
** Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind ("C-x g" . magit-status)
      :init
      (defun mu-magit-kill-buffers ()
	"Restore window configuration and kill all Magit buffers."
	(interactive)
	(let ((buffers (magit-mode-get-buffers)))
	  (magit-restore-window-configuration)
	  (mapc #'kill-buffer buffers)))
      :config
      (bind-key "q" #'mu-magit-kill-buffers magit-status-mode-map))
#+END_SRC
*** COMMENT Magit go away!
[[https://www.manueluberti.eu/emacs/2018/02/17/magit-bury-buffer/][Manuel Uberti - Exterminate Magit buffers]]
#+BEGIN_SRC emacs-lisp
(defun mu-magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

(bind-key "q" #'mu-magit-kill-buffers magit-status-mode-map)
#+END_SRC
** COMMENT Discord integration
#+BEGIN_SRC emacs-lisp
(use-package elcord)
(elcord-mode)
#+END_SRC
*** disable when not in use
#+BEGIN_SRC emacs-lisp
(remove-hook 'dashbord-mode elcord-mode t)
#+END_SRC
** =which-key=
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (setq which-key-side-window-max-height 0.5))
  (which-key-mode)
#+END_SRC
** Projectile and IDO
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish (projectile-mode)
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package flx-ido
    :demand t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (flx-ido-mode 1)
    ;; disable ido faces to see flx highlights.
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil))

  ;; (use-package ido-vertical-mode
  ;;   :config
  ;;   (ido-vertical-mode 1))
#+END_SRC
*** ido-grid-mode
[[https://github.com/larkery/ido-grid-mode.el#making-a-vertical-list-sometimes][Ido-grid-mode: making a vertical list sometimes]]
#+BEGIN_SRC emacs-lisp
  (use-package ido-grid-mode
    :demand t
    :config
    (ido-grid-mode 1)
    (setq ido-grid-mode-min-rows 9
          ido-grid-mode-max-rows 9))

  (defun ido-vertical-please (o &rest args)
    (let ((ido-grid-mode-max-columns 1)
            (ido-grid-mode-start-collapsed nil) ;; pop up tall at the start
            ;; why not have a different prefix as well?
            (ido-grid-mode-prefix ":: "))
      (apply o args)))

  (advice-add 'projectile-find-file :around #'ido-vertical-please)
#+END_SRC
** Smex auto-completion                                           :shortcut:
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :demand t)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
* LaTeX
** Basic settings
#+BEGIN_SRC emacs-lisp
(use-package latex
  :ensure auctex

  :config
  (setq font-latex-fontify-script nil)
  (setq font-latex-fontify-sectioning 'color)
  (setq TeX-auto-save t))

(set-default 'preview-scale-function 1.3)
#+END_SRC
** (Linux) set path for texlive
#+BEGIN_SRC emacs-lisp
  (with-system gnu/linux
    (getenv "PATH")
    (setenv "PATH"
            (concat
             "/usr/local/texlive/2020/bin/x86_64-linux/" ":"
	   
             (getenv "PATH"))))
#+END_SRC
* Org
** Fundamental configuration, basic shortcuts                      :shortcut:
[[https://emacs.stackexchange.com/a/22552][Diminish org-indent-mode - Emacs Stack Exchange]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :init
    (global-set-key (kbd "C-x C-a") 'org-agenda)
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))
    :config
    (setq org-startup-indented 't)
    (setq org-hide-leading-stars 't)
    (defun org-pdf-open (link)
      "Where page number is 105, the link should look like:
     [[pdf:/path/to/file.pdf#page=105][My description.]]"
      (let* ((path+page (split-string link "#page="))
             (pdf-file (car path+page))
             (page (car (cdr path+page))))
        (start-process "Adobe Acrobat" nil "Acrobat" "/A" (format "page=%s" page) pdf-file)))
    ;; sets new link type for org files
    (org-add-link-type "pdf" 'org-pdf-open))
#+END_SRC
** Preserve tree structure when archiving
#+BEGIN_SRC emacs-lisp
(defadvice org-archive-subtree (around fix-hierarchy activate)
  (let* ((fix-archive-p (and (not current-prefix-arg)
                             (not (use-region-p))))
         (afile (org-extract-archive-file (org-get-local-archive-location)))
         (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
    ad-do-it
    (when fix-archive-p
      (with-current-buffer buffer
        (goto-char (point-max))
        (while (org-up-heading-safe))
        (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
               (path (and olpath (split-string olpath "/")))
               (level 1)
               tree-text)
          (when olpath
            (org-mark-subtree)
            (setq tree-text (buffer-substring (region-beginning) (region-end)))
            (let (this-command) (org-cut-subtree))
            (goto-char (point-min))
            (save-restriction
              (widen)
              (-each path
                (lambda (heading)
                  (if (re-search-forward
                       (rx-to-string
                        `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                      (org-narrow-to-subtree)
                    (goto-char (point-max))
                    (unless (looking-at "^")
                      (insert "\n"))
                    (insert (make-string level ?*)
                            " "
                            heading
                            "\n"))
                  (cl-incf level)))
              (widen)
              (org-end-of-subtree t t)
              (org-paste-subtree level tree-text))))))))
#+END_SRC
** Enable bindings such as =<s= back                            :orgmodule:
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-tempo t)
#+END_SRC
*** TODO discover =org-tempo= more
** Intuitively clickable checkboxes                              :orgmodule:
#+BEGIN_SRC emacs-lisp
  (require 'org-mouse)
#+END_SRC
** Exporting org files
*** TODO make my templates smarter
*** export org files to LaTeX with ADMQ-math template
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
             '("ADMQ-math"
           "\\documentclass[DIV=calc, 11pt]{scrartcl}
  \\usepackage{xpatch}
  \\makeatletter
      \\xpatchcmd{\\@maketitle}{\\begin{center}}{\\begin{flushleft}}{}{}
      \\xpatchcmd{\\@maketitle}{\\end{center}}{\\end{flushleft}}{}{}
      \\xpatchcmd{\\@maketitle}{\\begin{tabular}[t]{c}}{\\begin{tabular}[t]{@{}l@{}}}{}{}
  \\makeatother

  \\usepackage[activate=true,
      final,
      babel=true,
      auto=true,
      expansion,
      protrusion=true,
      tracking=true,
      kerning=true,
      spacing=true,
      factor=0,
      stretch=15,
      shrink=30]{microtype}

  \\usepackage[utf8]{inputenc}
  \\usepackage{polski}
  \\usepackage[polish]{babel}
  \\usepackage{setspace}
  \\usepackage[textsize=scriptsize, colorinlistoftodos, obeyDraft]{todonotes}

  \\newcommand{\\todoim}[2][]
  {\\todo[color=red, #1]{#2}}

  \\newcommand{\\todomed}[2][]
  {\\todo[color=yellow, #1]{#2}}

  \\usepackage{marginnote}
  \\renewcommand*{\\marginfont}{\\color{gray}\\small\\ttfamily}

  \\usepackage[hidelinks]{hyperref}

  \\setkomafont{date}{%
      \\usekomafont{subtitle}
      }

  \\setkomafont{author}{%
      \\usekomafont{subtitle}
      }

  [NO-DEFAULT-PACKAGES]
        [PACKAGES]
        [EXTRA]

  \\setstretch{1}

  \\usepackage{geometry}
  \\geometry{a4paper, margin=0.5in, right=1.7in, bottom=0.7in, footskip=0.3in, marginpar=1.2in}

  \\usepackage{enumitem}
  \\setlist[itemize]{topsep=0.3em, itemsep=0em, label={\\scriptsize\\textbullet}}
  \\setlist[enumerate]{topsep=0.3em, leftmargin=2.8em, itemsep=0em, label={\\small\\textbf{\\arabic*.}}}

  \\usepackage{amsmath, amsthm}
  \\usepackage{natbib}

  \\newtheorem{theorem}{Twierdzenie}
  \\numberwithin{equation}{section}
  \\setlength{\\parindent}{0em}"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC
*** export org files to LaTeX with ADMQ-paper template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("ADMQ-paper"
                 "\\documentclass[12pt, final]{article}

  \\usepackage[activate=true,
      final,
      babel=true,
      auto=true,
      expansion,
      protrusion=true,
      tracking=true,
      kerning=true,
      spacing=true,
      factor=0,
      stretch=15,
      shrink=30]{microtype}

  \\usepackage[utf8]{inputenc}
  \\usepackage{polski}
  \\usepackage[polish]{babel}
  \\usepackage{setspace}

  \\setstretch{1.4}

  \\usepackage[hidelinks]{hyperref}

    [NO-DEFAULT-PACKAGES]
          [PACKAGES]
          [EXTRA]

  \\usepackage{geometry}
  \\geometry{a4paper, margin=1.1in}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC
*** export org files to LaTeX with ADMQ-text template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
           '("ADMQ-text"
         "\\documentclass[DIV=calc, 11pt]{scrartcl}
\\usepackage{xpatch}
\\makeatletter
    \\xpatchcmd{\\@maketitle}{\\begin{center}}{\\begin{flushleft}}{}{}
    \\xpatchcmd{\\@maketitle}{\\end{center}}{\\end{flushleft}}{}{}
    \\xpatchcmd{\\@maketitle}{\\begin{tabular}[t]{c}}{\\begin{tabular}[t]{@{}l@{}}}{}{}
\\makeatother

\\usepackage[activate=true,
    final,
    babel=true,
    auto=true,
    expansion,
    protrusion=true,
    tracking=true,
    kerning=true,
    spacing=true,
    factor=0,
    stretch=15,
    shrink=30]{microtype}

\\usepackage[utf8]{inputenc}
\\usepackage{polski}
\\usepackage[polish]{babel}
\\usepackage{setspace}
\\usepackage[textsize=scriptsize, colorinlistoftodos, obeyDraft]{todonotes}

\\newcommand{\\todoim}[2][]
{\\todo[color=red, #1]{#2}}

\\newcommand{\\todomed}[2][]
{\\todo[color=yellow, #1]{#2}}

\\usepackage{marginnote}
\\renewcommand*{\\marginfont}{\\color{gray}\\small\\ttfamily}

\\usepackage[hidelinks]{hyperref}

\\setkomafont{date}{%
    \\usekomafont{subtitle}
    }

\\setkomafont{author}{%
    \\usekomafont{subtitle}
    }

[NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]

\\setstretch{1}

\\usepackage{geometry}
\\geometry{a4paper, margin=0.5in, bottom=0.7in, footskip=0.3in, marginpar=1.2in}

\\usepackage{enumitem}
\\setlist[itemize]{topsep=0.3em, itemsep=0em, label={\\scriptsize\\textbullet}}
\\setlist[enumerate]{topsep=0.3em, leftmargin=2.8em, itemsep=0em, label={\\small\\textbf{\\arabic*.}}}

\\usepackage{amsmath, amsthm}
\\usepackage{natbib}

\\newtheorem{theorem}{Twierdzenie}
\\numberwithin{equation}{section}"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC
*** (win) open export in SumatraPDF
#+BEGIN_SRC emacs-lisp
  (with-system windows-nt
    (eval-after-load "org"
      '(progn
       ;; Change .pdf association directly within the alist
       (setcdr (assoc "\\.pdf\\'" org-file-apps) "SumatraPDF %s"))))
#+END_SRC
*** (linux) open export in Atril
#+BEGIN_SRC emacs-lisp
  (with-system gnu/linux
    (eval-after-load "org"
        '(progn
         ;; Change .pdf association directly within the alist
         (setcdr (assoc "\\.pdf\\'" org-file-apps) "atril %s"))))
#+END_SRC
** Define link types
*** COMMENT =menu=
Keeping it as a WIP ([[http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/][A generalized org-link with an extendable menu of actions]])
#+BEGIN_SRC emacs-lisp
  (defun option-r (link)
    (start-process "Adobe Reader DC" nil "AcroRd32" link))

  (defun option-s (link)
    (message "You picked option B for %s" link))

  (defvar menu-funcs
   '(("a" "Adobe Reader" option-r)
     ("s" "SumatraPDF" option-s)))

  (defun menu-click (path)
    (message "Open this PDF with %s"
     (concat
      (mapconcat
       (lambda (tup)
         (concat "[" (elt tup 0) "]"
                 (elt tup 1) " "))
       menu-funcs "")))
    (setq input (read-char-exclusive))
    (funcall
     (elt 
      (assoc
       (char-to-string input) menu-funcs)
      2)
     path))

  (org-add-link-type
   "menu"
   'menu-click)
#+END_SRC
** =org-journal= 
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind("C-C C-j" . org-journal-new-entry)
    :config
    (defun org-journal-save-entry-and-exit()
      "Simple convenience function.
    Saves the buffer of the current day's entry and kills the window
    Similar to org-capture like behavior"
      (interactive)
      (save-buffer)
      (kill-buffer-and-window))
    (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)

    (setq org-journal-date-format "%A, %d.%m.%y")
    (setq org-journal-dir "~/Dropbox/journal/"))
#+END_SRC
** =org-clip-link=                                                :shortcut:
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :bind ("C-x pi" . org-cliplink))
#+END_SRC
** Src code execution
#+BEGIN_SRC emacs-lisp
  (require 'ob-java)
  (add-to-list 'org-babel-load-languages '(java . t))
#+END_SRC
* Prog modes
** Universal packages
*** rainbow brackets
 #+BEGIN_SRC emacs-lisp
 (use-package rainbow-delimiters)
 (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
 #+END_SRC
*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init
    (add-hook 'prog-mode-hook #'smartparens-mode)
    (require 'smartparens-config))
#+END_SRC
*** fence-edit
Allows orgsrcblock-style GraphQL edits. 
#+BEGIN_SRC emacs-lisp
  (use-package fence-edit
    :load-path "elisp/fence-edit"
    :config
    (setq fence-edit-blocks
          (append '(("---" "---" yaml)
                    ("+++" "+++" toml)
                    ("graphql[ \t\n]*(?`" "`" graphql)
                    ("<html" "</html>" rjsx t)
                    ("<div" "</div>" rjsx t))
                  fence-edit-blocks))
    :hook
    ;; Don't shadow the fence-edit binding
    (markdown-mode-hook . (lambda () (bind-key "C-c '" nil markdown-mode-map)))
    :bind
    ("C-c '" . fence-edit-dwim))

#+END_SRC
** smart-compile
#+BEGIN_SRC emacs-lisp
  (use-package smart-compile
    :config
    (add-hook 'prog-mode-hook
            (lambda ()
              (local-set-key (kbd "C-x c") 'smart-compile)))
    (add-to-list 'smart-compile-alist (list (cons "\\.pas\\'" "fpc %f && %n.exe"))))
#+END_SRC
** Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :defer t
    :mode ("\\.js\\'" . rjsx-mode))

  (use-package graphql-mode
    :mode "\\(?:\\.g\\(?:\\(?:raph\\)?ql\\)\\)\\'")

  (use-package flycheck
    :defer t
    :hook (rjsx-mode)
    :config
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint json-jsonlist)))
    (setq flycheck-check-syntax-automatically '(save mode-enable))
    (flycheck-add-mode 'javascript-eslint 'web-mode))

  (use-package add-node-modules-path
    :hook (flycheck-mode))

  (use-package company
    :init
    (add-hook 'prog-mode-hook 'company-mode))

  (use-package company-quickhelp
    :init
    (add-hook 'prog-mode-hook 'company-quickhelp-mode))

#+END_SRC
** Java                                                           :shortcut:
#+BEGIN_SRC emacs-lisp
  (use-package autodisass-java-bytecode
    :defer t)

  (use-package google-c-style
    :defer t
    :commands
    (google-set-c-style))

  (use-package meghanada
    :defer t
    :init
    (add-hook 'java-mode-hook
              (lambda ()
                (google-set-c-style)
                (google-make-newline-indent)
                (meghanada-mode t)
                (smartparens-mode t)
                (rainbow-delimiters-mode t)
                (highlight-symbol-mode t)
                (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    (cond
     ((eq system-type 'windows-nt)
      (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
      (setq meghanada-maven-path "mvn.cmd"))
     (t
      (setq meghanada-java-path "java")
      (setq meghanada-maven-path "mvn")))
    :config
    (use-package realgud
      :ensure t)
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq c-basic-offset 2)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")
    (add-hook 'meghanada-mode-hook
              (lambda ()
                (local-set-key (kbd "C-x r") 'meghanada-exec-main)))
    :bind
    (:map meghanada-mode-map
          ("C-S-t" . meghanada-switch-testcase)
          ("M-RET" . meghanada-local-variable)
          ("C-M-." . helm-imenu)
          ("M-r" . meghanada-reference)
          ("M-t" . meghanada-typeinfo))
    :commands
    (meghanada-mode))
#+END_SRC
* Text modes
** General settings
*** =visual-line-mode= - my favorite word-wrap solution
 #+BEGIN_SRC emacs-lisp
 (add-hook 'text-mode-hook 'visual-line-mode)
 #+END_SRC
** markdown-mode
[[https://github.com/syl20bnr/spacemacs/issues/11806][If markdown failed with exit code 1]]
#+BEGIN_SRC emacs-lisp
  (use-package vmd-mode)

  (use-package markdown-mode
    :config
    (set-face-attribute 'markdown-code-face nil
                        :inherit 'nil)
    (setq markdown-live-preview-engine 'vmd
          markdown-command "vmd"))

  (use-package darkroom)

  (defun my-markdown-mode-hook ()
    (visual-line-mode 1)
    (darkroom-tentative-mode 1))
  (add-hook 'markdown-mode-hook 'my-markdown-mode-hook)
#+END_SRC
* =diminish= - hide some obvious minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t 
    :config
    (diminish 'smartparens-mode)
    (diminish 'company-mode)
    (diminish 'activity-watch-mode)
    (diminish 'projectile-mode)
    (diminish 'which-key-mode)
    (diminish 'auto-revert-mode)
    (diminish 'org-indent-mode)
    (diminish 'visual-line-mode)
    (diminish 'page-break-lines-mode))
#+END_SRC
